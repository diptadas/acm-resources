//Dipta Das CUET CSE-11

#include <bits/stdc++.h>
using namespace std;

struct edge
{
    int u,v,w;
};

bool cmp(edge a,edge b)
{
    return a.w<b.w;
}

int pr[100],n,m;
edge e[100];

int find_set(int r)
{
    return (pr[r]==r) ? r : find_set(pr[r]);
}

int kruskal()
{
    sort(e,e+m,cmp);

    for(int i=1; i<=n; i++) pr[i]=i;

    int cnt=0,mst=0;

    for(int i=0; i<m && cnt<n-1; i++)
    {
        int u=find_set(e[i].u);
        int v=find_set(e[i].v);

        if(u!=v)
        {
            cout<<e[i].u<<" "<<e[i].v<<" "<<e[i].w<<endl;
            mst+=e[i].w;
            pr[u]=v;
            cnt++;
        }
    }
    return mst;
}

int main()
{
    cin>>n>>m;

    for(int i=0; i<m; i++)
    {
        int u,v,w;
        cin>>u>>v>>w;

        edge get;
        get.u=u;
        get.v=v;
        get.w=w;

        e[i]=get;
    }

    cout<<"Minimum Spanning tree :"<<endl;
    cout<<kruskal();

    return 0;
}

/*
7 9
1 2 28
2 3 16
3 4 12
4 5 22
5 6 25
6 1 10
2 7 14
7 4 18
7 5 24
*/

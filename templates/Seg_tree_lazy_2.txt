//Dipta Das CUET CSE-11

#include <bits/stdc++.h>
using namespace std;

#define LL long long
#define pii pair<int,int>
#define mp make_pair
#define fr first
#define sc second
#define pb push_back
#define mset(a,s) memset(a,s,sizeof(a))
#define all(a) a.begin(),a.end()
#define pi acos(-1.0)
#define eps 1e-7
#define mod 100000007
#define inf 1e9
#define nn 100005

using namespace std;

int arr[nn];

struct info
{
    int prop,sum;
} tree[nn*3];

void make_tree(int node,int b,int e)
{
    if(b==e)
    {
        tree[node].sum=arr[b];
        tree[node].prop=0;
        return;
    }
    int Left=node*2;
    int Right=node*2+1;
    int mid=(b+e)/2;
    make_tree(Left,b,mid);
    make_tree(Right,mid+1,e);
    tree[node].sum=tree[Left].sum+tree[Right].sum;
    tree[node].prop=0;
}

int query(int node,int b,int e,int i,int j,int carry = 0)
{
    if (i > e || j < b) return 0;
    if(b>=i and e<=j) return tree[node].sum + carry*(e-b+1);
    int Left=node<<1;
    int Right=(node<<1)+1;
    int mid=(b+e)>>1;
    int p1 = query(Left, b, mid, i, j, carry + tree[node].prop);
    int p2 = query(Right, mid+1, e, i, j, carry+  tree[node].prop);
    return  p1+p2;

}

void update(int node,int b,int e,int i,int j,int x)
{
    if (i > e || j < b) return;
    if (b >= i && e <= j)
    {
        tree[node].sum += ((e-b+1)*x);
        tree[node].prop += x;
        return;
    }
    int Left=node*2;
    int Right=(node*2)+1;
    int mid=(b+e)/2;
    update(Left,b,mid,i,j,x);
    update(Right,mid+1,e,i,j,x);
    tree[node].sum=tree[Left].sum+tree[Right].sum+(e-b+1)*tree[node].prop;
}

int main()
{
    ios_base::sync_with_stdio(0),cin.tie(0);

    int n;
    cin>>n;
    for(int i=1; i<=n; i++) cin>>arr[i];

    make_tree(1,1,n);

    update(1,1,n,2,4,5);
    cout<<query(1,1,n,1,3,0)<<endl;

    update(1,1,n,2,5,2);
    cout<<query(1,1,n,2,2,0)<<endl;
    return 0;
}

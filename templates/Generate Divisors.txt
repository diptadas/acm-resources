//Dipta Das CUET CSE-11

#include <bits/stdc++.h>
using namespace std;

#define LL         long long
#define pll        pair<LL,LL>
#define mp         make_pair
#define fr         first
#define sc         second
#define pb         push_back

#define read(n)    scanf("%lld",&n)
#define mset(a,s)  memset(a,s,sizeof(a))
#define all(a)     a.begin(),a.end()

#define PI         acos(-1.0)
#define EPS        1e-7
#define MOD        1000000007
#define INF        1e9
#define NN         1000009

bool flag[NN];
int primes[NN],total;
LL factors[NN],freq[NN],total_fact;
LL divisors[NN],total_div;

void sieve()
{
    for(int i=4; i<NN; i+=2) flag[i]=1;

    for(int i=3; i*i<NN; i+=2)
    {
        if(flag[i]==0)
        {
            for(int j=i*i; j<NN; j+=2*i) flag[j]=1;
        }
    }

    total=0;

    for(int i=2; i<NN; i++)
        if(!flag[i]) primes[total++]=i;
}


void factorize(LL n)
{
    LL i,cnt;

    total_fact=0;

    for(i=0; i<total && primes[i]*primes[i]<=n && n!=1; i++)
    {
        if(n%primes[i]==0)
        {
            cnt=0;
            while(n%primes[i]==0)
            {
                n/=primes[i];
                cnt++;
            }

            factors[total_fact]=primes[i];
            freq[total_fact]=cnt;
            total_fact++;
        }
    }

    if(n>1)
    {
        factors[total_fact]=n;
        freq[total_fact]=1;
        total_fact++;
    }
}

void Generate(LL cur,LL num)
{
    LL i,val;
    if(cur==total_fact)
    {
        divisors[total_div++]=num;
    }
    else
    {
        val=1;
        for(i=0; i<=freq[cur]; i++)
        {
            Generate(cur+1,num*val);
            val=val*factors[cur];
        }
    }
}


int main()
{
    sieve();
    factorize(36);
    total_div=0;
    Generate(0,1);

    sort(divisors,divisors+total_div);

    for(int i=0; i<total_div; i++) printf("%lld ",divisors[i]);

    return 0;
}

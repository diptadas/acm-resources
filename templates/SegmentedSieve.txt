#define NN 50000    //sqrt(2^31)
#define SQ 225      //sqrt(NN)
#define RNG 100009  //range (b-a)

bool flag[NN],flag2[RNG];
LL primes[NN],total;

void sieve()
{
    LL i,j;

    for(i=3; i<SQ; i+=2)
    {
        if(flag[i]==0)
        {
            for(j=i*i; j<NN; j+=2*i) flag[j]=1;
        }
    }

    total=0;

    for(i=3; i<NN; i+=2) //2 not included
        if(!flag[i]) primes[total++]=i;
}


LL segmented_sieve(LL a, LL b)
{
    //mset(flag2,0);

    LL i,j,k,cnt=0;

    if(a<=2 && 2<=b) cnt++;

    if(b<2) return 0;
    if(a<3) a=3;
    if(a%2==0) a++;


    for (i=0; primes[i]*primes[i]<=b; i++)
    {
        j=primes[i]*((a+primes[i]-1)/primes[i]);

        if(j%2==0) j+=primes[i];

        for(k=primes[i]*2; j<=b; j+=k)
        {
            if(j!=primes[i]) flag2[j-a]=1;
        }
    }

    for (i=0; i<=b-a; i+=2)
    {
        if(flag2[i]==0) cnt++;
        flag2[i]=0; //reset
    }

    return cnt;
}